---
import { getCollection } from 'astro:content';
import AUTODOC_ENTRIES from '../../public/autodoc/index.json';

interface Child {
  slug: string;
  name: string;
}

let entries: { [key: string]: Child[] } = {};

AUTODOC_ENTRIES.forEach((slug) => {
  slug = slug.split('.')[0];
  const [crate, file] = slug.split('/');
  if (!entries[crate]) {
    entries[crate] = [];
  }
  const name = file
    .replace(/(?:^|_)([a-z0-9])/gm, (_, p1: string) => p1.toUpperCase())
    .replace(/[A-Z]/gm, ' $&');
  entries[crate].push({ slug, name });
});

const docPages = (await getCollection('docs')).sort((a, b) => a.data.order - b.data.order);
const extraPages = (await getCollection('extra')).sort((a, b) => a.data.order - b.data.order);
const changelogPages = (await getCollection('changelogs')).sort(
  (a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf()
);

export interface Props {
  slug?: string;
}

let { slug } = Astro.props;

const stars = fetch('https://api.github.com/repos/eludris/eludris')
  .then((res) => res.json())
  .then((res) => res.stargazers_count);
---

<div id="sidebar" class="notransition">
  <h3>The Eludris Developer Portal</h3>
  <hr class="sep" />
  <ul id="index">
    <li>
      <details open class="category">
        <summary>Docs</summary>
        <ul>
          {
            docPages.map((entry) => (
              <li class="page">
                <a
                  href={entry.data.order == 0 ? '/' : `/docs/${entry.slug}`}
                  class={slug == entry.slug ? 'active' : ''}
                >
                  {entry.data.title}
                </a>
              </li>
            ))
          }
        </ul>
      </details>
    </li>
    <h4>API reference</h4>
    {
      Object.entries(entries)
        .filter(([_, children]) => children.length)
        .map(([crate, children]) => (
          <li>
            <details open class="category">
              <summary>{crate[0].toUpperCase() + crate.substring(1)}</summary>
              <ul>
                {children.map((child) => (
                  <li class="page">
                    <a href={`/reference/${child.slug}`} class={slug == child.slug ? 'active' : ''}>
                      {child.name}
                    </a>
                  </li>
                ))}
              </ul>
            </details>
          </li>
        ))
    }
    <h4>Other</h4>
    <li>
      <details open class="category">
        <summary>Extras</summary>
        <ul>
          {
            extraPages.map((entry) => (
              <li class="page">
                <a href={`/extra/${entry.slug}`} class={slug == entry.slug ? 'active' : ''}>
                  {entry.data.title}
                </a>
              </li>
            ))
          }
        </ul>
      </details>
    </li>
    <li>
      <details open class="category">
        <summary>Changelogs</summary>
        <ul>
          {
            changelogPages.map((entry) => (
              <li class="page">
                <a
                  href={`/changelogs/${entry.data.version}`}
                  class={slug == entry.data.version ? 'active' : ''}
                >
                  Version {entry.data.version}
                </a>
              </li>
            ))
          }
        </ul>
      </details>
    </li>
  </ul>
  <span id="star">
    <span
      >Eludris has <span id="star-text">{stars} stars</span>. consider starring the <a
        href="https://github.com/eludris">repository</a
      >!</span
    >
  </span>
</div>

<script>
  fetch('https://api.github.com/repos/eludris/eludris') // update star count after page load
    .then((res) => res.json())
    .then((res) => res.stargazers_count)
    .then((stars) => {
      document.getElementById('star-text')!.innerText = `${stars} stars`;
    });
</script>

<style>
  #sidebar {
    position: fixed;
    display: flex;
    flex-direction: column;
    top: 0;
    left: 0;
    height: 100%;
    width: var(--sidebar-width);
    padding: 10px;
    background-color: var(--gray-200);
    box-sizing: border-box;
    transition: transform ease-in-out 250ms;
    overflow-y: scroll;
  }

  #index {
    padding: 0;
    list-style: none;
  }

  .category {
    list-style: none;
  }

  .category > summary {
    font-size: 22px;
    font-weight: normal;
    margin: 10px 0;
    list-style: none;
  }

  .category > ul {
    padding: 0 5px;
  }

  .page {
    list-style: none;
    padding: 2px 0;
    margin: 0px 5px;
  }

  #sidebar a {
    color: var(--color-text-200);
    font-weight: 300;
    border: unset;
  }

  #sidebar a:hover {
    color: var(--gray-500);
  }

  #sidebar.sidebar-hide {
    transform: translate(-100%, 0);
  }

  #sidebar a.active {
    border-bottom: 1px solid var(--color-text-200);
  }

  #sidebar a.active:hover {
    border-bottom: 1px solid var(--gray-500);
  }

  .sep {
    color: var(--color-text-200);
    opacity: 0.7;
    width: 95%;
    margin: 0;
  }

  #star {
    margin-top: auto;
    position: relative;
  }

  #star-text {
    color: var(--pink-500);
  }

  #star a {
    border-bottom: 1px solid var(--color-text-200);
  }

  :global(.notransition) {
    transition: unset !important;
  }
</style>
